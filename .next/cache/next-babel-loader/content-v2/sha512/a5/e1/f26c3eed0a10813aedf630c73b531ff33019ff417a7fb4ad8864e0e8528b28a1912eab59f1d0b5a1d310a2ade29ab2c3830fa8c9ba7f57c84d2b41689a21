{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { query as q } from 'faunadb';\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { fauna } from '../../../services/fauna';\nexport default NextAuth({\n  providers: [Providers.GitHub({\n    clientId: '4612ee36d888d2813e0c',\n    clientSecret: '03b779da28183ebb21f1f1c500d69b3001decdc0',\n    scope: 'read:user'\n  })],\n  callbacks: {\n    async session(session) {\n      try {\n        const userActiveSubscription = await fauna.query(q.Get(q.Intersection([q.Match(q.Index('subscription_by_user_ref'), q.Select(\"ref\", q.Get(q.Match(q.Index('user_by_email'), q.Casefold(session.user.email))))), q.Match(q.Index('subscription_by_status'), \"active\")])));\n        return _objectSpread(_objectSpread({}, session), {}, {\n          activeSubscription: userActiveSubscription\n        });\n      } catch {\n        return session;\n      }\n    },\n\n    async signIn(user, account, profile) {\n      const {\n        email\n      } = user;\n\n      try {\n        await fauna.query(q.If(q.Not(q.Exists(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))), q.Create(q.Collection('users'), {\n          data: {\n            email\n          }\n        }), q.Get(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))));\n        return true;\n      } catch {\n        return false;\n      }\n    }\n\n  }\n});","map":{"version":3,"sources":["/home/larissa/Documentos/01-Front-Rocket/aula-03-ignews/src/pages/api/auth/[...nextauth].ts"],"names":["query","q","NextAuth","Providers","fauna","providers","GitHub","clientId","clientSecret","scope","callbacks","session","userActiveSubscription","Get","Intersection","Match","Index","Select","Casefold","user","email","activeSubscription","signIn","account","profile","If","Not","Exists","Create","Collection","data"],"mappings":";;;;;;AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AAEA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,eAAeF,QAAQ,CAAC;AACtBG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAE,sBADK;AAEfC,IAAAA,YAAY,EAAE,0CAFC;AAGfC,IAAAA,KAAK,EAAE;AAHQ,GAAjB,CADS,CADW;AAQtBC,EAAAA,SAAS,EAAE;AACT,UAAMC,OAAN,CAAcA,OAAd,EAAuB;AACrB,UAAI;AACF,cAAMC,sBAAsB,GAAG,MAAMR,KAAK,CAACJ,KAAN,CACnCC,CAAC,CAACY,GAAF,CACEZ,CAAC,CAACa,YAAF,CAAe,CACbb,CAAC,CAACc,KAAF,CACEd,CAAC,CAACe,KAAF,CAAQ,0BAAR,CADF,EAEEf,CAAC,CAACgB,MAAF,CACE,KADF,EAEEhB,CAAC,CAACY,GAAF,CACEZ,CAAC,CAACc,KAAF,CACEd,CAAC,CAACe,KAAF,CAAQ,eAAR,CADF,EAEEf,CAAC,CAACiB,QAAF,CAAWP,OAAO,CAACQ,IAAR,CAAaC,KAAxB,CAFF,CADF,CAFF,CAFF,CADa,EAabnB,CAAC,CAACc,KAAF,CACEd,CAAC,CAACe,KAAF,CAAQ,wBAAR,CADF,EAEE,QAFF,CAba,CAAf,CADF,CADmC,CAArC;AAsBA,+CACKL,OADL;AAEEU,UAAAA,kBAAkB,EAAET;AAFtB;AAID,OA3BD,CA2BE,MAAM;AACN,eAAOD,OAAP;AACD;AACF,KAhCQ;;AAiCT,UAAMW,MAAN,CAAaH,IAAb,EAAmBI,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,YAAM;AAAEJ,QAAAA;AAAF,UAAYD,IAAlB;;AAEA,UAAI;AACF,cAAMf,KAAK,CAACJ,KAAN,CACJC,CAAC,CAACwB,EAAF,CACExB,CAAC,CAACyB,GAAF,CACEzB,CAAC,CAAC0B,MAAF,CACE1B,CAAC,CAACc,KAAF,CACEd,CAAC,CAACe,KAAF,CAAQ,eAAR,CADF,EAEEf,CAAC,CAACiB,QAAF,CAAWC,IAAI,CAACC,KAAhB,CAFF,CADF,CADF,CADF,EASEnB,CAAC,CAAC2B,MAAF,CACE3B,CAAC,CAAC4B,UAAF,CAAa,OAAb,CADF,EAEE;AAAEC,UAAAA,IAAI,EAAE;AAACV,YAAAA;AAAD;AAAR,SAFF,CATF,EAaEnB,CAAC,CAACY,GAAF,CACEZ,CAAC,CAACc,KAAF,CACEd,CAAC,CAACe,KAAF,CAAQ,eAAR,CADF,EAEEf,CAAC,CAACiB,QAAF,CAAWC,IAAI,CAACC,KAAhB,CAFF,CADF,CAbF,CADI,CAAN;AAuBA,eAAO,IAAP;AACD,OAzBD,CAyBE,MAAM;AACN,eAAO,KAAP;AACD;AAEF;;AAjEQ;AARW,CAAD,CAAvB","sourcesContent":["import { query as q } from 'faunadb';\n\nimport NextAuth from 'next-auth'\nimport { session } from 'next-auth/client';\nimport Providers from 'next-auth/providers'\n\nimport { fauna } from '../../../services/fauna';\n\nexport default NextAuth({\n  providers: [\n    Providers.GitHub({\n      clientId: '4612ee36d888d2813e0c',\n      clientSecret: '03b779da28183ebb21f1f1c500d69b3001decdc0',\n      scope: 'read:user'\n    }),\n  ],\n  callbacks: {\n    async session(session) {\n      try {\n        const userActiveSubscription = await fauna.query(\n          q.Get(\n            q.Intersection([\n              q.Match(\n                q.Index('subscription_by_user_ref'),\n                q.Select(\n                  \"ref\",\n                  q.Get(\n                    q.Match(\n                      q.Index('user_by_email'),\n                      q.Casefold(session.user.email)\n                    )\n                  )\n                )\n              ),\n              q.Match(\n                q.Index('subscription_by_status'),\n                \"active\"\n              )\n            ])\n          )\n        )\n        return {\n          ...session,\n          activeSubscription: userActiveSubscription\n        }  \n      } catch {\n        return session;\n      }\n    },\n    async signIn(user, account, profile) {\n      const { email } = user;\n\n      try {\n        await fauna.query(\n          q.If(\n            q.Not(\n              q.Exists(\n                q.Match(\n                  q.Index('user_by_email'),\n                  q.Casefold(user.email)\n                )\n              )\n            ),\n            q.Create(\n              q.Collection('users'),\n              { data: {email} }\n            ),\n            q.Get(\n              q.Match(\n                q.Index('user_by_email'),\n                q.Casefold(user.email)\n              )\n            )\n          )\n        )\n        \n        return true\n      } catch {\n        return false\n      }\n\n    },\n  }\n\n})"]},"metadata":{},"sourceType":"module"}