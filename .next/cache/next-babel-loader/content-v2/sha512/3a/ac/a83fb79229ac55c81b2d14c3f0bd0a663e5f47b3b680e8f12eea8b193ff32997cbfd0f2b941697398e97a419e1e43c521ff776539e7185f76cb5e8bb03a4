{"ast":null,"code":"import _defineProperty from \"/home/larissa/Documentos/01-Front-Rocket/aula-03-ignews/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _objectWithoutProperties from \"/home/larissa/Documentos/01-Front-Rocket/aula-03-ignews/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/larissa/Documentos/01-Front-Rocket/aula-03-ignews/src/components/ActiveLink/index.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Link from \"next/link\";\nimport { useRouter } from 'next/router';\nimport { cloneElement } from \"react\";\n//função para nao precisar fazer ternario no active\nexport function ActiveLink(_ref) {\n  _s();\n\n  var children = _ref.children,\n      activeClassName = _ref.activeClassName,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"activeClassName\"]);\n\n  //asPath vê a rota acessada\n  //o classname checa qual rota é acessada\n  //o rest pega todas as propriedades q sao passadas para o active link\n  //que nao sao children nem activeclassname e repassa pro link\n  //o cloneElement serve para clonar um children, e ainda complementa-lo\n  var _useRouter = useRouter(),\n      asPath = _useRouter.asPath;\n\n  var className = asPath === rest.href ? activeClassName : '';\n  return /*#__PURE__*/_jsxDEV(Link, _objectSpread(_objectSpread({}, rest), {}, {\n    children: /*#__PURE__*/cloneElement(children, {\n      className: className\n    })\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ActiveLink, \"9pMG9Ra3x5O/yaZiUz6XxVJ+Rds=\", false, function () {\n  return [useRouter];\n});\n\n_c = ActiveLink;\n\nvar _c;\n\n$RefreshReg$(_c, \"ActiveLink\");","map":{"version":3,"sources":["/home/larissa/Documentos/01-Front-Rocket/aula-03-ignews/src/components/ActiveLink/index.tsx"],"names":["Link","useRouter","cloneElement","ActiveLink","children","activeClassName","rest","asPath","className","href"],"mappings":";;;;;;;;;;;AAAA,OAAOA,IAAP,MAAgC,WAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAAuBC,YAAvB,QAA2C,OAA3C;AAOA;AAEA,OAAO,SAASC,UAAT,OAA6E;AAAA;;AAAA,MAAvDC,QAAuD,QAAvDA,QAAuD;AAAA,MAA7CC,eAA6C,QAA7CA,eAA6C;AAAA,MAAzBC,IAAyB;;AAClF;AACA;AACA;AACA;AAEA;AANkF,mBAO/DL,SAAS,EAPsD;AAAA,MAO1EM,MAP0E,cAO1EA,MAP0E;;AAQlF,MAAMC,SAAS,GAAGD,MAAM,KAAKD,IAAI,CAACG,IAAhB,GACdJ,eADc,GAEd,EAFJ;AAGA,sBACE,QAAC,IAAD,kCAAUC,IAAV;AAAA,2BACGJ,YAAY,CAACE,QAAD,EAAW;AACtBI,MAAAA,SAAS,EAATA;AADsB,KAAX;AADf;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAlBeL,U;UAOKF,S;;;KAPLE,U","sourcesContent":["import Link, { LinkProps } from \"next/link\";\nimport { useRouter } from 'next/router';\nimport { ReactElement, cloneElement } from \"react\";\n\ninterface ActiveLinkProps extends LinkProps {\n  children: ReactElement;\n  activeClassName: string;\n}\n\n//função para nao precisar fazer ternario no active\n\nexport function ActiveLink({ children, activeClassName, ...rest }: ActiveLinkProps) {\n  //asPath vê a rota acessada\n  //o classname checa qual rota é acessada\n  //o rest pega todas as propriedades q sao passadas para o active link\n  //que nao sao children nem activeclassname e repassa pro link\n\n  //o cloneElement serve para clonar um children, e ainda complementa-lo\n  const { asPath } = useRouter();\n  const className = asPath === rest.href\n    ? activeClassName\n    : '';\n  return (\n    <Link {...rest}>\n      {cloneElement(children, {\n        className,\n      })}\n    </Link>\n  )\n}"]},"metadata":{},"sourceType":"module"}