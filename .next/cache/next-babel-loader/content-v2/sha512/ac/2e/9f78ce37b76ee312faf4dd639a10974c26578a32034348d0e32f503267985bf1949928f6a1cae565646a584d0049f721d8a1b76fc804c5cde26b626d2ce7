{"ast":null,"code":"import { query as q } from 'faunadb';\nimport NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { fauna } from '../../../services/fauna';\nexport default NextAuth({\n  providers: [Providers.GitHub({\n    clientId: '4612ee36d888d2813e0c',\n    clientSecret: '03b779da28183ebb21f1f1c500d69b3001decdc0',\n    scope: 'read:user'\n  })],\n  callbacks: {\n    async signIn(user, account, profile) {\n      const {\n        email\n      } = user;\n\n      try {\n        await fauna.query(q.If(q.Not(q.Exists(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))), q.Create(q.Collection('users'), {\n          data: {\n            email\n          }\n        }), q.Get(q.Match(q.Index('user_by_email'), q.Casefold(user.email)))));\n        return true;\n      } catch {\n        return false;\n      }\n    }\n\n  }\n});","map":{"version":3,"sources":["/home/larissa/Documentos/01-Front-Rocket/aula-03-ignews/src/pages/api/auth/[...nextauth].ts"],"names":["query","q","NextAuth","Providers","fauna","providers","GitHub","clientId","clientSecret","scope","callbacks","signIn","user","account","profile","email","If","Not","Exists","Match","Index","Casefold","Create","Collection","data","Get"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AAEA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AAEA,SAASC,KAAT,QAAsB,yBAAtB;AAEA,eAAeF,QAAQ,CAAC;AACtBG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,MAAV,CAAiB;AACfC,IAAAA,QAAQ,EAAE,sBADK;AAEfC,IAAAA,YAAY,EAAE,0CAFC;AAGfC,IAAAA,KAAK,EAAE;AAHQ,GAAjB,CADS,CADW;AAQtBC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,YAAM;AAAEC,QAAAA;AAAF,UAAYH,IAAlB;;AAEA,UAAI;AACF,cAAMR,KAAK,CAACJ,KAAN,CACJC,CAAC,CAACe,EAAF,CACEf,CAAC,CAACgB,GAAF,CACEhB,CAAC,CAACiB,MAAF,CACEjB,CAAC,CAACkB,KAAF,CACElB,CAAC,CAACmB,KAAF,CAAQ,eAAR,CADF,EAEEnB,CAAC,CAACoB,QAAF,CAAWT,IAAI,CAACG,KAAhB,CAFF,CADF,CADF,CADF,EASEd,CAAC,CAACqB,MAAF,CACErB,CAAC,CAACsB,UAAF,CAAa,OAAb,CADF,EAEE;AAAEC,UAAAA,IAAI,EAAE;AAACT,YAAAA;AAAD;AAAR,SAFF,CATF,EAaEd,CAAC,CAACwB,GAAF,CACExB,CAAC,CAACkB,KAAF,CACElB,CAAC,CAACmB,KAAF,CAAQ,eAAR,CADF,EAEEnB,CAAC,CAACoB,QAAF,CAAWT,IAAI,CAACG,KAAhB,CAFF,CADF,CAbF,CADI,CAAN;AAuBA,eAAO,IAAP;AACD,OAzBD,CAyBE,MAAM;AACN,eAAO,KAAP;AACD;AAEF;;AAjCQ;AARW,CAAD,CAAvB","sourcesContent":["import { query as q } from 'faunadb';\n\nimport NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\n\nimport { fauna } from '../../../services/fauna';\n\nexport default NextAuth({\n  providers: [\n    Providers.GitHub({\n      clientId: '4612ee36d888d2813e0c',\n      clientSecret: '03b779da28183ebb21f1f1c500d69b3001decdc0',\n      scope: 'read:user'\n    }),\n  ],\n  callbacks: {\n    async signIn(user, account, profile) {\n      const { email } = user;\n\n      try {\n        await fauna.query(\n          q.If(\n            q.Not(\n              q.Exists(\n                q.Match(\n                  q.Index('user_by_email'),\n                  q.Casefold(user.email)\n                )\n              )\n            ),\n            q.Create(\n              q.Collection('users'),\n              { data: {email} }\n            ),\n            q.Get(\n              q.Match(\n                q.Index('user_by_email'),\n                q.Casefold(user.email)\n              )\n            )\n          )\n        )\n        \n        return true\n      } catch {\n        return false\n      }\n\n    },\n  }\n\n})"]},"metadata":{},"sourceType":"module"}