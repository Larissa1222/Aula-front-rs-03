"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CamelCaseNamingStrategy = exports.SnakeCaseNamingStrategy = void 0;

var _typeorm = require("typeorm");

var _StringUtils = require("typeorm/util/StringUtils");

// Inspired by https://github.com/tonivj5/typeorm-naming-strategies
class SnakeCaseNamingStrategy extends _typeorm.DefaultNamingStrategy {
  // Pluralise table names (set customName to override)
  tableName(className, customName) {
    return customName || (0, _StringUtils.snakeCase)(`${className}s`);
  }

  columnName(propertyName, customName, embeddedPrefixes) {
    return `${(0, _StringUtils.snakeCase)(embeddedPrefixes.join("_"))}${customName || (0, _StringUtils.snakeCase)(propertyName)}`;
  }

  relationName(propertyName) {
    return (0, _StringUtils.snakeCase)(propertyName);
  }

  joinColumnName(relationName, referencedColumnName) {
    return (0, _StringUtils.snakeCase)(`${relationName}_${referencedColumnName}`);
  }

  joinTableName(firstTableName, secondTableName, firstPropertyName, secondPropertyName) {
    return (0, _StringUtils.snakeCase)(`${firstTableName}_${firstPropertyName.replace(/\./gi, "_")}_${secondTableName}`);
  }

  joinTableColumnName(tableName, propertyName, columnName) {
    return (0, _StringUtils.snakeCase)(`${tableName}_${columnName || propertyName}`);
  }

  classTableInheritanceParentColumnName(parentTableName, parentTableIdPropertyName) {
    return (0, _StringUtils.snakeCase)(`${parentTableName}_${parentTableIdPropertyName}`);
  }

  eagerJoinRelationAlias(alias, propertyPath) {
    return `${alias}__${propertyPath.replace(".", "_")}`;
  }

}

exports.SnakeCaseNamingStrategy = SnakeCaseNamingStrategy;

class CamelCaseNamingStrategy extends _typeorm.DefaultNamingStrategy {
  // Pluralise collection names, uses (set customName to override)
  tableName(className, customName) {
    return customName || (0, _StringUtils.camelCase)(`${className}s`);
  }

}

exports.CamelCaseNamingStrategy = CamelCaseNamingStrategy;